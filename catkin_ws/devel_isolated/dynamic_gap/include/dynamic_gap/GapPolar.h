// Generated by gencpp from file dynamic_gap/GapPolar.msg
// DO NOT EDIT!


#ifndef DYNAMIC_GAP_MESSAGE_GAPPOLAR_H
#define DYNAMIC_GAP_MESSAGE_GAPPOLAR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dynamic_gap
{
template <class ContainerAllocator>
struct GapPolar_
{
  typedef GapPolar_<ContainerAllocator> Type;

  GapPolar_()
    : right_angle(0.0)
    , right_range(0.0)
    , left_angle(0.0)
    , left_range(0.0)  {
    }
  GapPolar_(const ContainerAllocator& _alloc)
    : right_angle(0.0)
    , right_range(0.0)
    , left_angle(0.0)
    , left_range(0.0)  {
  (void)_alloc;
    }



   typedef float _right_angle_type;
  _right_angle_type right_angle;

   typedef float _right_range_type;
  _right_range_type right_range;

   typedef float _left_angle_type;
  _left_angle_type left_angle;

   typedef float _left_range_type;
  _left_range_type left_range;





  typedef boost::shared_ptr< ::dynamic_gap::GapPolar_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamic_gap::GapPolar_<ContainerAllocator> const> ConstPtr;

}; // struct GapPolar_

typedef ::dynamic_gap::GapPolar_<std::allocator<void> > GapPolar;

typedef boost::shared_ptr< ::dynamic_gap::GapPolar > GapPolarPtr;
typedef boost::shared_ptr< ::dynamic_gap::GapPolar const> GapPolarConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dynamic_gap::GapPolar_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dynamic_gap::GapPolar_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dynamic_gap::GapPolar_<ContainerAllocator1> & lhs, const ::dynamic_gap::GapPolar_<ContainerAllocator2> & rhs)
{
  return lhs.right_angle == rhs.right_angle &&
    lhs.right_range == rhs.right_range &&
    lhs.left_angle == rhs.left_angle &&
    lhs.left_range == rhs.left_range;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dynamic_gap::GapPolar_<ContainerAllocator1> & lhs, const ::dynamic_gap::GapPolar_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dynamic_gap

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dynamic_gap::GapPolar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamic_gap::GapPolar_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamic_gap::GapPolar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamic_gap::GapPolar_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamic_gap::GapPolar_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamic_gap::GapPolar_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dynamic_gap::GapPolar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "633e4eeee72c08575897401f2c80d401";
  }

  static const char* value(const ::dynamic_gap::GapPolar_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x633e4eeee72c0857ULL;
  static const uint64_t static_value2 = 0x5897401f2c80d401ULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamic_gap::GapPolar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dynamic_gap/GapPolar";
  }

  static const char* value(const ::dynamic_gap::GapPolar_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dynamic_gap::GapPolar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# angles are in the incoming laser frame  (rad)\n"
"float32 right_angle\n"
"float32 right_range\n"
"float32 left_angle\n"
"float32 left_range\n"
"\n"
"# convenience: Euclidean width of the gap  (m)\n"
"# float32 width \n"
;
  }

  static const char* value(const ::dynamic_gap::GapPolar_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dynamic_gap::GapPolar_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.right_angle);
      stream.next(m.right_range);
      stream.next(m.left_angle);
      stream.next(m.left_range);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GapPolar_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamic_gap::GapPolar_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dynamic_gap::GapPolar_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "right_angle: ";
    Printer<float>::stream(s, indent + "  ", v.right_angle);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "right_range: ";
    Printer<float>::stream(s, indent + "  ", v.right_range);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "left_angle: ";
    Printer<float>::stream(s, indent + "  ", v.left_angle);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "left_range: ";
    Printer<float>::stream(s, indent + "  ", v.left_range);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYNAMIC_GAP_MESSAGE_GAPPOLAR_H
